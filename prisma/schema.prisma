// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @unique @default(autoincrement())
  stravaId               Int?                     @map(name: "strava_id")
  email                  String?                  @unique @map(name: "email")
  password               String?                  @map(name: "password")
  name                   String?
  sex                    String?
  profile                String?                  @map(name: "profile_long")
  stravaRefreshToken     String?                  @map(name: "strava_refresh_token")
  activities             Activity[]
  challengeUsers         ChallengeUser[]
  dailyActivity          DailyActivity[]
  challengeActivity      ChallengeActivity[]
  challengeDailyActivity ChallengeDailyActivity[]
  point                  Point?
  userTokens             UserToken[]
  payments               Payment[]
  challengeGroupUser     ChallengeGroupUser[]

  @@map("user")
}

model UserToken {
  id           Int      @id @unique @default(autoincrement())
  userId       Int      @map("user_id")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model Admin {
  id          Int          @id @unique @default(autoincrement())
  username    String       @unique
  password    String
  status      AdminStatus  @default(ACTIVE)
  adminTokens AdminToken[]

  @@map("admin")
}

model AdminToken {
  id           Int      @id @unique @default(autoincrement())
  adminId      Int      @map("admin_id")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_token")
}

model Point {
  userId Int  @id @unique @map(name: "user_id")
  points Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point")
}

model Activity {
  id                 String              @id @unique
  userId             Int                 @map(name: "user_id")
  name               String?
  distance           Float
  movingTime         Float?              @map(name: "moving_time")
  elapsedTime        Int?                @map(name: "elapsed_time")
  totalElevationGain Float?              @map(name: "total_elevation_gain")
  type               String              @default("run")
  startDate          DateTime            @default(now()) @map(name: "start_date")
  startDateLocal     DateTime            @default(now()) @map(name: "start_date_local")
  timezone           String              @default("Asia/Bangkok")
  visibility         String?
  averageSpeed       Float?              @map(name: "average_speed")
  maxSpeed           Float?              @map(name: "max_speed")
  imageUrl           String?             @map(name: "image_url")
  activityType       ActivityType        @default(SYNCHRONOUS) @map("activity_type")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeActivity  ChallengeActivity[]

  @@map("activity")
}

model DailyActivity {
  id             Int      @id @unique @default(autoincrement())
  distance       Float
  movingTime     Float?   @map(name: "moving_time")
  elapsedTime    Int?     @map(name: "elapsed_time")
  startDateLocal DateTime @default(now()) @map(name: "start_date_local")
  userId         Int      @map(name: "user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_activity")
}

model Challenge {
  id                     Int                      @id @unique @default(autoincrement())
  title                  String
  startDate              DateTime                 @map("start_date")
  endDate                DateTime                 @map("end_date")
  createdDate            DateTime                 @default(now()) @map("created_date")
  code                   String?                  @unique @default(uuid())
  image                  String?
  description            String?
  ticketPrice            Float                    @default(0) @map("ticket_price")
  challengeType          ChallengeType            @default(ONE_VS_MANY) @map("challenge_type")
  status                 ChallengeStatus          @default(PUBLIC)
  challengeUsers         ChallengeUser[]
  rule                   Rule?
  challengeActivity      ChallengeActivity[]
  challengeDailyActivity ChallengeDailyActivity[]
  payments               Payment[]
  challengeGroups        ChallengeGroup[]

  @@map("challenge")
}

model ChallengeGroup {
  id                  Int                  @id @unique @default(autoincrement())
  name                String
  challengeId         Int                  @map("challenge_id")
  challenge           Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeGroupUsers ChallengeGroupUser[]

  @@map("challenge_group")
}

model ChallengeGroupUser {
  id               Int            @id @unique @default(autoincrement())
  challengeGroupId Int            @map("challenge_group_id")
  userId           Int            @map("user_id")
  challengeGroup   ChallengeGroup @relation(fields: [challengeGroupId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_group_user")
}

model Rule {
  id          Int        @id @unique @default(autoincrement())
  target      Float?
  minPace     Float?     @map("min_pace")
  maxPace     Float?     @map("max_pace")
  minDistance Float?     @map("min_distance")
  maxDistance Float?     @map("max_distance")
  challengeId Int        @unique @map("challenge_id")
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("rule")
}

model Payment {
  id          Int         @id @unique @default(autoincrement())
  paymentCode String      @unique @map("payment_code")
  userId      Int         @map("user_id")
  challengeId Int         @map("challenge_id")
  amount      Float       @map("amount")
  isCompleted Boolean     @default(false) @map("is_completed")
  paymentType PaymentType @default(REGIST_FEE) @map("payment_type")
  createdAt   DateTime    @default(now()) @map("created_at")
  completedAt DateTime?   @map("completed_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge   @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId, paymentType])
  @@map("payment")
}

model PaymentMessages {
  id          Int     @id @unique @default(autoincrement())
  paymentCode String? @unique @map("payment_code")
  message     String  @map("message_id")

  @@map("payment_message")
}

model ChallengeUser {
  id          Int       @id @unique @default(autoincrement())
  userId      Int       @map("user_id")
  challengeId Int       @map("challenge_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("challenge_user")
}

model ChallengeActivity {
  id          Int       @id @unique @default(autoincrement())
  activityId  String    @map("activity_id")
  userId      Int       @map("user_id")
  challengeId Int       @map("challenge_id")
  isValid     Boolean   @map("is_valid")
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity    Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("challenge_activity")
}

model ChallengeDailyActivity {
  id             Int       @id @unique @default(autoincrement())
  distance       Float
  movingTime     Float?    @map(name: "moving_time")
  elapsedTime    Int?      @map(name: "elapsed_time")
  startDateLocal DateTime  @default(now()) @map(name: "start_date_local")
  userId         Int       @map("user_id")
  challengeId    Int       @map("challenge_id")
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_daily_activity")
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum ChallengeStatus {
  PUBLIC
  PRIVATE
}

enum ChallengeType {
  ONE_VS_MANY
  GROUP_VS_GROUP
}

enum PaymentType {
  REGIST_FEE
  BONUS
}

enum ActivityType {
  SYNCHRONOUS
  MANUAL
}
